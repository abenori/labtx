diff -r -u src_orig/icu.c src/icu.c
--- src_orig/icu.c	2011-10-30 03:24:40 +0000
+++ src/icu.c	2015-05-25 21:57:32 +0000
@@ -61,7 +61,8 @@
 };
 
 int luaopen_icu(lua_State *L) {
-	luaL_register(L, "icu", icu_lib);
+	//luaL_register(L, "icu", icu_lib);
+	luaL_newlib(L, icu_lib);
 
 	lua_pushstring(L, U_ICU_VERSION);
 	lua_setfield(L,-2,"_VERSION");
diff -r -u src_orig/icu.collator.c src/icu.collator.c
--- src_orig/icu.collator.c	2011-10-30 03:24:40 +0000
+++ src/icu.collator.c	2015-05-25 21:57:32 +0000
@@ -150,7 +150,8 @@
 	icu4lua_requireustringlib(L);
 
 	luaL_newmetatable(L, "icu.collator");
-	luaL_register(L, NULL, icu_collator_meta);
+	//luaL_register(L, NULL, icu_collator_meta);
+	luaL_newlib(L, icu_collator_meta);
 	IDX_COLLATOR_META = lua_gettop(L);
 
 	icu4lua_pushustringmetatable(L);
@@ -159,7 +160,8 @@
 	icu4lua_pushustringpool(L);
 	IDX_USTRING_POOL = lua_gettop(L);
 
-	luaL_register(L, "icu.collator", &null_entry);
+	//luaL_register(L, "icu.collator", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_COLLATOR_LIB = lua_gettop(L);
 	for (lib_entry = icu_collator_lib; lib_entry->name; lib_entry++) {
 		lua_pushstring(L, lib_entry->name);
diff -r -u src_orig/icu.idna.c src/icu.idna.c
--- src_orig/icu.idna.c	2011-10-30 03:24:40 +0000
+++ src/icu.idna.c	2015-05-25 21:57:32 +0000
@@ -232,7 +232,8 @@
 	icu4lua_pushustringpool(L);
 	IDX_USTRING_POOL = lua_gettop(L);
 
-	luaL_register(L, "icu.idna", &null_entry);
+	//luaL_register(L, "icu.idna", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_IDNA_LIB = lua_gettop(L);
 	for (lib_entry = icu_idna_lib; lib_entry->name; lib_entry++) {
 		lua_pushstring(L, lib_entry->name);
diff -r -u src_orig/icu.normalizer.c src/icu.normalizer.c
--- src_orig/icu.normalizer.c	2011-10-30 03:24:40 +0000
+++ src/icu.normalizer.c	2015-05-25 21:57:32 +0000
@@ -209,7 +209,8 @@
 	icu4lua_pushustringpool(L);
 	IDX_USTRING_POOL = lua_gettop(L);
 
-	luaL_register(L, "icu.normalizer", &null_entry);
+	//luaL_register(L, "icu.normalizer", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_NORMALIZER_LIB = lua_gettop(L);
 	for (lib_entry = icu_normalizer_lib; lib_entry->name; lib_entry++) {
 		lua_pushvalue(L, IDX_USTRING_META);
diff -r -u src_orig/icu.regex.c src/icu.regex.c
--- src_orig/icu.regex.c	2011-10-30 03:24:40 +0000
+++ src/icu.regex.c	2015-05-25 21:57:32 +0000
@@ -852,7 +852,7 @@
 	luaL_Buffer b;
 	if (lua_isstring(L,1)) {
 		const char* s = lua_tostring(L,1);
-		const char* stop = s + (ptrdiff_t)lua_objlen(L,1);
+		const char* stop = s + (ptrdiff_t)lua_rawlen(L,1);
 		luaL_buffinit(L, &b);
 		for (;s != stop; s++) {
 			if (strchr(REGEX_SPECIAL, s[0])) {
@@ -990,7 +990,8 @@
 	IDX_REGEX_META = lua_gettop(L);
 
 	luaL_newmetatable(L, "icu.regex match");
-	luaL_register(L, NULL, icu_regex_match_meta);
+	//luaL_register(L, NULL, icu_regex_match_meta);
+	luaL_newlib(L, icu_regex_match_meta);
 	IDX_MATCH_META = lua_gettop(L);
 
 	icu4lua_pushustringmetatable(L);
@@ -1010,7 +1011,8 @@
 	icu4lua_pushustringpool(L);
 	IDX_USTRING_POOL = lua_gettop(L);
 	
-	luaL_register(L, "icu.regex", &null_entry);
+	//luaL_register(L, "icu.regex", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_REGEX_LIB = lua_gettop(L);
 
 	lua_pushvalue(L, IDX_REGEX_META);
diff -r -u src_orig/icu.stringprep.c src/icu.stringprep.c
--- src_orig/icu.stringprep.c	2011-10-30 03:24:40 +0000
+++ src/icu.stringprep.c	2015-05-25 21:57:32 +0000
@@ -155,10 +155,12 @@
 	IDX_USTRING_POOL = lua_gettop(L);
 
 	luaL_newmetatable(L, "icu.stringprep");
-	luaL_register(L, NULL, icu_stringprep_meta);
+	//luaL_register(L, NULL, icu_stringprep_meta);
+	luaL_newlib(L, icu_stringprep_meta);
 	IDX_STRINGPREP_META = lua_gettop(L);
 
-	luaL_register(L, "icu.stringprep", &null_entry);
+	//luaL_register(L, "icu.stringprep", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_STRINGPREP_LIB = lua_gettop(L);
 	for (lib_entry = icu_stringprep_lib; lib_entry->name; lib_entry++) {
 		lua_pushstring(L, lib_entry->name);
diff -r -u src_orig/icu.ufile.c src/icu.ufile.c
--- src_orig/icu.ufile.c	2011-10-30 03:24:40 +0000
+++ src/icu.ufile.c	2015-05-25 21:57:32 +0000
@@ -305,10 +305,12 @@
 	IDX_USTRING_POOL = lua_gettop(L);
 	
 	luaL_newmetatable(L, "UFILE*");
-	luaL_register(L, NULL, icu_ufile_meta);
+	//luaL_register(L, NULL, icu_ufile_meta);
+	luaL_newlib(L, icu_ufile_meta);
 	IDX_UFILE_META = lua_gettop(L);
 
-	luaL_register(L, "icu.ufile", &null_entry);
+	//luaL_register(L, "icu.ufile", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_UFILE_LIB = lua_gettop(L);
 
 	for (lib_entry = icu_ufile_lib; lib_entry->name; lib_entry++) {
diff -r -u src_orig/icu.ustring.c src/icu.ustring.c
--- src_orig/icu.ustring.c	2011-10-30 03:24:40 +0000
+++ src/icu.ustring.c	2015-05-25 22:50:07 +0000
@@ -134,7 +134,7 @@
 	reps = luaL_checkint(L,2);
 	luaL_buffinit(L, &concat_buffer);
 	for (; reps > 0; reps--) {
-		luaL_addlstring(&concat_buffer, lua_touserdata(L,1), lua_objlen(L,1));
+		luaL_addlstring(&concat_buffer, lua_touserdata(L,1), lua_rawlen(L,1));
 	}
 	icu4lua_pushuresult(&concat_buffer, USTRING_UV_META, USTRING_UV_POOL);
 	return 1;
@@ -214,7 +214,7 @@
 
     uiter_setString(&iter, ustring, uchar_len);
 	
-	new_ustring = (UChar*)lua_newuserdata(L, lua_objlen(L,1));
+	new_ustring = (UChar*)lua_newuserdata(L, lua_rawlen(L,1));
 	
     iter.move(&iter, 0, UITER_LIMIT);
 	for (uc = uiter_previous32(&iter); uc != U_SENTINEL; uc = uiter_previous32(&iter)) {
@@ -229,7 +229,7 @@
 		uchar_len--;
 	}
 	
-	lua_pushlstring(L, (const char*)lua_touserdata(L,-1), lua_objlen(L,-1));
+	lua_pushlstring(L, (const char*)lua_touserdata(L,-1), lua_rawlen(L,-1));
 	icu4lua_internrawustring(L, USTRING_UV_META, USTRING_UV_POOL);
 	return 1;
 }
@@ -484,7 +484,7 @@
 static void ustring_addmatch(UMatchState* ms) {
 	lua_State *L = ms->L;
 	luaL_Buffer *b = ms->b;
-	switch(lua_type(L,3)) {
+	switch(lua_type(L, 3)) {
 		// Userdata replacements will have been checked already for the right metatable
 		case LUA_TUSERDATA: {
 			const UChar* replace_ustring = icu4lua_trustustring(L,3);
@@ -495,7 +495,7 @@
 			uiter_setString(&replaceIter, replace_ustring, replace_uchar_len);
 			start_state = uiter_getState(&replaceIter);
 			for (c = uiter_next32(&replaceIter); c != U_SENTINEL; c = uiter_next32(&replaceIter)) {
-				if (c == L_ESC) {
+				if(c == L_ESC) {
 					uint32_t new_state;
 					uiter_previous32(&replaceIter);
 					new_state = uiter_getState(&replaceIter);
@@ -516,9 +516,12 @@
 						uiter_next32(&replaceIter);
 						start_state = uiter_getState(&replaceIter);
 					}
-					else {
-						start_state = new_state;
-					}
+					else if (c == '%'){
+						new_state = uiter_getState(&replaceIter);
+						uiter_next32(&replaceIter);
+						start_state = uiter_getState(&replaceIter);
+						icu4lua_addustring(b, replace_ustring + new_state, start_state - new_state);
+					} else luaL_error(L, "invalid use of '%%' in replacement ustring");
 				}
 			}
 			icu4lua_addustring(b, replace_ustring + start_state, replace_uchar_len - start_state);
@@ -556,7 +559,7 @@
 			luaL_error(L, "replacement function/table must either yield a ustring or nil/false");
 		}
 		lua_pop(L,1);
-		luaL_addlstring(b, (const char*)lua_touserdata(L,-1), lua_objlen(L,-1));
+		luaL_addlstring(b, (const char*)lua_touserdata(L,-1), lua_rawlen(L,-1));
 		lua_pop(L,1);
 	}
 }
@@ -663,7 +666,7 @@
 
 static int icu_ustring_fromraw(lua_State *L) {
 	luaL_checktype(L,1,LUA_TSTRING);
-	luaL_argcheck(L, 0 == (lua_objlen(L,1) % sizeof(UChar)), 1, "invalid length for a raw ustring");
+	luaL_argcheck(L, 0 == (lua_rawlen(L,1) % sizeof(UChar)), 1, "invalid length for a raw ustring");
 	lua_settop(L,1);
 	icu4lua_internrawustring(L, USTRING_UV_META, USTRING_UV_POOL);
 	return 1;
@@ -909,7 +912,7 @@
 						continue;
 					case 's': {
 						luaL_argcheck(L, lua_getmetatable(L,arg) && lua_rawequal(L,-1,USTRING_UV_META), arg, "expecting ustring");
-						luaL_addlstring(&b, (const char*)lua_touserdata(L,arg), lua_objlen(L,arg));
+						luaL_addlstring(&b, (const char*)lua_touserdata(L,arg), lua_rawlen(L,arg));
 						continue;
 					}
 					default:
@@ -998,7 +1001,8 @@
 	lua_setmetatable(L,IDX_USTRING_POOL);
 	
 	// Create the lib table
-	luaL_register(L, "icu.ustring", &null_entry);
+//	luaL_register(L, "icu.ustring", &null_entry);
+	luaL_newlib(L, &null_entry);
 	IDX_USTRING_LIB = lua_gettop(L);
 
 	// Populate the lib table, adding in the upvalues for the metatable and pool
diff -r -u src_orig/icu.utf8.c src/icu.utf8.c
--- src_orig/icu.utf8.c	2011-10-30 03:24:40 +0000
+++ src/icu.utf8.c	2015-05-25 21:57:32 +0000
@@ -846,7 +846,7 @@
 		lf.extraline = 0;
 	}
 	ungetc(c, lf.f);
-	status = lua_load(L, getF, &lf, filename);
+	status = lua_load(L, getF, &lf, filename,NULL);
 	readstatus = ferror(lf.f);
 	fclose(lf.f);  // close file (even in case of errors)
 	if (readstatus) {
@@ -904,7 +904,8 @@
 };
 
 int luaopen_icu_utf8(lua_State *L) {
-	luaL_register(L, "icu.utf8", icu_utf8_lib);
+//	luaL_register(L, "icu.utf8", icu_utf8_lib);
+	luaL_newlib(L, icu_utf8_lib);
 
     lua_pushliteral(L,"\xEF\xBB\xBF");
 	lua_setfield(L,-2,"bom");
diff -r -u src_orig/icu4lua.h src/icu4lua.h
--- src_orig/icu4lua.h	2011-10-30 03:24:40 +0000
+++ src/icu4lua.h	2015-05-25 21:57:32 +0000
@@ -17,7 +17,7 @@
 #define icu4lua_pushustringmetatable(L)	(lua_getfield((L),LUA_REGISTRYINDEX,"icu.ustring"))
 #define icu4lua_pushustringpool(L)		(lua_getfield((L),LUA_REGISTRYINDEX,"icu.ustring pool"))
 
-#define icu4lua_ustrlen(L,i)			(lua_objlen((L),(i)) / sizeof(UChar))
+#define icu4lua_ustrlen(L,i)			(lua_rawlen((L),(i)) / sizeof(UChar))
 
 #define icu4lua_pushustring(L,ustr,ustr_len,meta_idx,pool_idx)    										\
 	{																									\
@@ -43,8 +43,8 @@
 		if (lua_isnil((L),-1)) {																		\
 			UChar* ___new_ustring;																		\
 			lua_pop((L),1);																				\
-			___new_ustring = (UChar*)lua_newuserdata((L), lua_objlen((L),-1));							\
-			memcpy(___new_ustring, lua_tostring((L),-2), lua_objlen((L),-2));							\
+			___new_ustring = (UChar*)lua_newuserdata((L), lua_rawlen((L),-1));							\
+			memcpy(___new_ustring, lua_tostring((L),-2), lua_rawlen((L),-2));							\
 			lua_insert((L),-2);																			\
 			lua_pushvalue((L),-2);																		\
 			lua_rawset((L),(pool_idx));																	\
@@ -59,7 +59,7 @@
 #define icu4lua_trustustring(L,i)		((UChar*)lua_touserdata((L),(i)))
 
 #define icu4lua_pushrawustring(L,i)																		\
-	lua_pushlstring(L, (const char*)lua_touserdata((L),(i)), lua_objlen((L),(i)))
+	lua_pushlstring(L, (const char*)lua_touserdata((L),(i)), lua_rawlen((L),(i)))
 
 #define icu4lua_addustring(B, ustr, ustr_len)															\
 	luaL_addlstring((B), (const char*)(ustr), (ustr_len) * sizeof(UChar))
diff -r -u src_orig/matchengine.c src/matchengine.c
--- src_orig/matchengine.c	2011-10-30 03:24:40 +0000
+++ src/matchengine.c	2015-05-26 07:51:36 +0000
@@ -212,6 +212,7 @@
 					return sig;
 				}
 				uiter_next32(pPattIter);
+				break;
 			case ']':
 				status = U_ZERO_ERROR;
 				uiter_setState(pPattIter, restore_state, &status);
@@ -362,11 +363,12 @@
 	uiter_next32(pPattIter);
 	patt_restore_state = uiter_getState(pPattIter);
 	string_restore_state = uiter_getState(pSourceIter);
-	while (i >= 0) {
+	while (1) {
 		if (match(ms, pPattIter, pSourceIter)) {
 			return 1;
 		}
 		i--;
+		if (i < 0 ) return 0;
 		status = U_ZERO_ERROR;
 		uiter_setState(pPattIter, patt_restore_state, &status);
 		status = U_ZERO_ERROR;
@@ -467,11 +469,16 @@
 			}
 		case U_SENTINEL: // end of pattern
 			return 1; // match succeeded
-		case '$':
-			if (uiter_current32(pSourceIter) == U_SENTINEL) {
-				return 1;
+		case '$':{
+			uint32_t current_state = uiter_getState(pPattIter);
+			uiter_next32(pPattIter);
+			if(uiter_current32(pPattIter) == U_SENTINEL) {
+				if(uiter_current32(pSourceIter) == U_SENTINEL) return 1;
+				else return 0;
 			}
+			uiter_previous32(pPattIter);
 			goto dflt;
+		}
 		default: dflt: { // it is a pattern item
 			int m;
 			uint32_t startclass_state = uiter_getState(pPattIter);
diff -r -u src_orig/matchengine.h src/matchengine.h
--- src_orig/matchengine.h	2011-10-30 03:24:40 +0000
+++ src/matchengine.h	2015-05-25 21:57:32 +0000
@@ -16,6 +16,10 @@
 typedef void ProcessUCharIteratorRangeFunc(UMatchState* ms, uint32_t start_state, uint32_t end_state);
 typedef void ProcessUMatchStateFunc(UMatchState* ms);
 
+#ifndef LUA_MAXCAPTURES
+#define LUA_MAXCAPTURES 512
+#endif
+
 struct UMatchState {
 	int level; // total number of captures, finished or unfinished
 	lua_State *L;
